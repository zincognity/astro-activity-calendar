---
import { getGithubActivityData } from "./data/github-activity-data"
import { tf } from "../lib/format-text"
import type { Theme, ThemeProps } from "../types/theme"
import { LAYOUT } from "../constants/layout"
import { themes } from "../constants/themes"
import { buildCells, buildMonthLabels } from "../lib/builders"

interface Props {
  user: string
  locale?: string
  hoverMessage?: string
  totalMessage?: string
  theme?: Theme
  cache?: boolean
  themeProps?: ThemeProps
}

const {
  locale = "en",
  user,
  hoverMessage = "{{count}} contributions on {{date}}",
  totalMessage = "{{total}} total contributions",
  theme = "indigo",
  cache,
} = Astro.props

// Fetch GitHub activity data (server-side)
const { total, contributions } = await getGithubActivityData(user, cache)

// Current theme data
const { colors, meta } = themes[theme]

const cells = buildCells(contributions)
const monthLabels = buildMonthLabels(contributions, locale)
---

<style>
  /* Principal container */
  #activity-wrapper {
    position: relative;
    padding-bottom: 2rem;
  }

  @media (min-width: 1024px) {
    #activity-wrapper {
      padding-top: 1rem;
      padding-bottom: 1rem;
    }
  }

  /* SVG container */
  #activity-svg {
    display: block;
    overflow: visible;
  }

  /* Overlay for each cell */
  .activity-overlay {
    position: absolute;
    pointer-events: auto;
  }

  /* Tooltip inside the overlay */
  .activity-overlay span {
    pointer-events: none;
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%) translateY(0.125rem);
    border-radius: 0.375rem;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    opacity: 0;
    transition: all 0.2s ease;
    background-color: rgb(63, 63, 70);
    color: white;
    white-space: nowrap;
    z-index: 10;
  }

  .activity-overlay:hover span,
  .activity-overlay:focus-within span {
    transform: translateX(-50%) translateY(-0.25rem);
    opacity: 1;
  }

  /* Total contributions text */
  #activity-total {
    margin-top: 3rem;
    width: 100%;
    text-align: left;
    font-size: 0.875rem;
  }

  /* Adjustments for month labels */
  .month-label {
    font-size: 15px;
    fill: currentColor;
  }
</style>

<div class="relative pb-8 lg:pt-4 lg:pb-4">
  <div
    id="activity-wrapper"
    class="relative"
    style={`width:${LAYOUT.SVG_W}px; height:${LAYOUT.SVG_H}px;`}
  >
    <svg
      id="activity-svg"
      width={LAYOUT.SVG_W}
      height={LAYOUT.SVG_H}
      viewBox={`0 0 ${LAYOUT.SVG_W} ${LAYOUT.SVG_H}`}
    >
      <g class="month-label" transform="translate(0, 15)">
        {
          monthLabels.map((m) => (
            <text x={m.x} y={0} class={meta.text}>
              {m.label}
            </text>
          ))
        }
      </g>

      {/* Contribution cells */}
      <g transform="translate(0, 20)">
        {
          cells.map((cell, i) => (
            <rect
              data-cell-index={i}
              x={cell.x}
              y={cell.y}
              width={LAYOUT.CELL}
              height={LAYOUT.CELL}
              rx="2"
              ry="2"
              fill={colors[cell.level]}
              style="stroke: rgba(255, 255, 255, 0.04); cursor:pointer;"
            />
          ))
        }
      </g>
    </svg>

    {/* Overlays for tooltips */}
    <div
      id="activity-overlays"
      class="absolute top-0 left-0"
      style={`width:${LAYOUT.SVG_W}px; height:${LAYOUT.SVG_H}px;`}
    >
      {
        cells.map((cell, i) => {
          const tooltipText = tf(hoverMessage, {
            count: cell.count,
            date: new Date(cell.date).toLocaleString(locale, {
              month: "short",
              day: "numeric",
            }),
          })

          return (
            <div
              class="activity-overlay group pointer-events-auto absolute"
              data-cell-index={i}
              style={`left:${cell.x}px; top:${cell.y + 20}px; width:${LAYOUT.CELL}px; height:${LAYOUT.CELL}px;`}
            >
              <span
                class={`pointer-events-none absolute bottom-full left-1/2 w-max -translate-x-1/2 -translate-y-0.5 rounded-md px-2 py-1 text-xs opacity-0 transition-all group-hover:-translate-y-1 group-hover:opacity-100 ${meta.tooltipText}`}
                style="background-color: rgb(63, 63, 70);"
              >
                {tooltipText}
              </span>
            </div>
          )
        })
      }
    </div>
  </div>

  <span
    id="activity-total"
    class={`mt-5 block w-full text-left text-sm ${meta.text}`}
    set:html={tf(totalMessage, { total: total.lastYear })}
  />
</div>

<script is:inline>
  function syncOverlays() {
    const svg = document.getElementById("activity-svg")
    const wrapper = document.getElementById("activity-wrapper")
    const overlays = document.querySelectorAll(
      "#activity-overlays .activity-overlay"
    )
    if (!svg || !wrapper || overlays.length === 0) return

    const wrapperRect = wrapper.getBoundingClientRect()
    const rects = svg.querySelectorAll("rect[data-cell-index]")

    rects.forEach((r) => {
      const idx = Number(r.getAttribute("data-cell-index"))
      const overlay = document.querySelector(
        `#activity-overlays .activity-overlay[data-cell-index="${idx}"]`
      )
      if (!overlay) return
      const rRect = r.getBoundingClientRect()

      overlay.style.left = `${Math.round(rRect.left - wrapperRect.left)}px`
      overlay.style.top = `${Math.round(rRect.top - wrapperRect.top)}px`
      overlay.style.width = `${Math.round(rRect.width)}px`
      overlay.style.height = `${Math.round(rRect.height)}px`
    })
  }

  function setupOverlaySync() {
    requestAnimationFrame(syncOverlays)
    window.addEventListener("resize", () => requestAnimationFrame(syncOverlays))

    const wrapper = document.getElementById("activity-wrapper")
    if (window.ResizeObserver && wrapper) {
      const ro = new ResizeObserver(() => requestAnimationFrame(syncOverlays))
      ro.observe(wrapper)
    }
  }

  document.addEventListener("DOMContentLoaded", setupOverlaySync)
  document.addEventListener("astro:after-swap", setupOverlaySync)
</script>
