---
// src/components/GithubActivity.astro
import { formatDate } from "@/lib/format-date"
import { getGithubActivityData } from "./data/github-activity-data"
import { tf } from "@/lib/format-text"
import type { Theme, ThemeProps } from "@/types/theme"
import { themes } from "@/constants/themes"

interface Props {
  locale: string
  user: string
  hoverMessage?: string
  totalMessage?: string
  theme?: Theme
  cache?: boolean
  themeProps?: ThemeProps
}

const {
  locale,
  user,
  hoverMessage = "{{count}} contributions on {{date}}",
  totalMessage = "{{total}} total contributions",
  theme = "indigo",
  cache,
} = Astro.props

// Fetch GitHub activity data (server-side)
const { total, contributions } = await getGithubActivityData(user, cache)

// Layout
const LAYOUT = {
  CELL: 14,
  GAP: 4,
  TOP_OFFSET: 22,
  SVG_W: 950,
  SVG_H: 144,
}
const STEP = LAYOUT.CELL + LAYOUT.GAP

// Helpers & data structures
type Cell = {
  weekIndex: number
  dayIndex: number
  x: number
  y: number
  date: string
  level: number
  count: number
}

// Current theme data
const { colors, meta } = themes[theme]

const weeksCount = Math.ceil(contributions.length / 7)
const weeks = Array.from({ length: weeksCount })

const cells: Cell[] = weeks.flatMap((_, weekIndex) =>
  contributions
    .slice(weekIndex * 7, weekIndex * 7 + 7)
    .map(({ date, level, count }, dayIndex) => ({
      weekIndex,
      dayIndex,
      x: weekIndex * STEP,
      y: LAYOUT.TOP_OFFSET + dayIndex * STEP,
      date,
      level: Number(level),
      count,
    }))
)

// PRECOMPUTE month labels (Astro-friendly: simple data, no JSX from functions)
const monthLabels: { x: number; label: string }[] = []
for (let weekIndex = 1; weekIndex < weeksCount; weekIndex++) {
  const week = contributions.slice(weekIndex * 7, weekIndex * 7 + 7)
  if (week.length === 0) continue

  const month = formatDate(locale, week[0]?.date)
  const prevWeek = contributions.slice(
    (weekIndex - 1) * 7,
    (weekIndex - 1) * 7 + 7
  )
  const prevMonth =
    prevWeek.length > 0 ? formatDate(locale, prevWeek[0]?.date) : null

  if (month !== prevMonth) {
    const label = month.charAt(0).toUpperCase() + month.slice(1)
    monthLabels.push({ x: weekIndex * STEP, label })
  }
}
---

<div class="relative pb-8 lg:pt-4 lg:pb-4">
  <div
    id="activity-wrapper"
    class="relative"
    style={`width:${LAYOUT.SVG_W}px; height:${LAYOUT.SVG_H}px;`}
  >
    <svg
      id="activity-svg"
      width={LAYOUT.SVG_W}
      height={LAYOUT.SVG_H}
      viewBox={`0 0 ${LAYOUT.SVG_W} ${LAYOUT.SVG_H}`}
      style="display:block; overflow:visible;"
    >
      <g>
        {
          monthLabels.map((m) => (
            <text x={m.x} y={0} fill="currentColor" class={meta.text}>
              {m.label}
            </text>
          ))
        }
      </g>

      {
        cells.map((cell, i) => (
          <rect
            data-cell-index={i}
            x={cell.x}
            y={cell.y}
            width={LAYOUT.CELL}
            height={LAYOUT.CELL}
            rx="2"
            ry="2"
            fill={colors[cell.level]}
            style="stroke: rgba(255, 255, 255, 0.04); cursor:pointer;"
          />
        ))
      }
    </svg>

    <div
      id="activity-overlays"
      class="absolute top-0 left-0"
      style={`width:${LAYOUT.SVG_W}px; height:${LAYOUT.SVG_H}px;`}
    >
      {
        cells.map((cell, i) => {
          const tooltipText = tf(hoverMessage, {
            count: cell.count,
            date: new Date(cell.date).toLocaleString(locale, {
              month: "short",
              day: "numeric",
            }),
          })

          return (
            <div
              class="activity-overlay group pointer-events-auto absolute"
              data-cell-index={i}
              style={`left:0px; top:0px; width:${LAYOUT.CELL}px; height:${LAYOUT.CELL}px;`}
            >
              <span
                class={`pointer-events-none absolute bottom-full left-1/2 w-max -translate-x-1/2 -translate-y-0.5 rounded-md px-2 py-1 text-xs opacity-0 transition-all group-hover:-translate-y-1 group-hover:opacity-100 ${meta.tooltipBg} ${meta.tooltipText}`}
              >
                {tooltipText}
              </span>
            </div>
          )
        })
      }
    </div>
  </div>

  <span
    class={`mt-2 block w-full text-left text-sm ${meta.text}`}
    set:html={tf(totalMessage, { total: total.lastYear })}
  />
</div>

<script type="module">
  function syncOverlays() {
    const svg = document.getElementById("activity-svg")
    const wrapper = document.getElementById("activity-wrapper")
    const overlays = document.querySelectorAll(
      "#activity-overlays .activity-overlay"
    )
    if (!svg || !wrapper || overlays.length === 0) return

    const wrapperRect = wrapper.getBoundingClientRect()
    const rects = svg.querySelectorAll("rect[data-cell-index]")

    rects.forEach((r) => {
      const idx = Number(r.getAttribute("data-cell-index"))
      const overlay = document.querySelector(
        `#activity-overlays .activity-overlay[data-cell-index="${idx}"]`
      )
      if (!overlay) return
      const rRect = r.getBoundingClientRect()

      overlay.style.left = `${Math.round(rRect.left - wrapperRect.left)}px`
      overlay.style.top = `${Math.round(rRect.top - wrapperRect.top)}px`
      overlay.style.width = `${Math.round(rRect.width)}px`
      overlay.style.height = `${Math.round(rRect.height)}px`
    })
  }

  function setupOverlaySync() {
    requestAnimationFrame(syncOverlays)
    window.addEventListener("resize", () => requestAnimationFrame(syncOverlays))

    const wrapper = document.getElementById("activity-wrapper")
    if (window.ResizeObserver && wrapper) {
      const ro = new ResizeObserver(() => requestAnimationFrame(syncOverlays))
      ro.observe(wrapper)
    }
  }

  document.addEventListener("DOMContentLoaded", setupOverlaySync)
  document.addEventListener("astro:after-swap", setupOverlaySync)
</script>
